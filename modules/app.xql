xquery version "3.0";

module namespace app="http://localhost:8080/exist/apps/baudi/templates";

declare namespace edirom="http://www.edirom.de/ns/1.3";
declare namespace mei="http://www.music-encoding.org/ns/mei";
declare namespace tei="http://www.tei-c.org/ns/1.0";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://localhost:8080/exist/apps/baudi/config" at "config.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare %templates:wrap function app:editionVolTitle($node as node(), $model as map(*)) {
    let $editionDoc := doc(concat('xmldb:exist:///db/contents/baudi/editionFiles/', $model('docID'), '.xml'))/node()
    let $editionTitle := $editionDoc//edirom:editionName/text()
    return
        $editionTitle
(:        $model('docID'):)
};

declare %templates:wrap function app:editionVolWorks($node as node(), $model as map(*)) {
    let $editionDoc := doc(concat('xmldb:exist:///db/contents/baudi/editionFiles/', $model('docID'), '.xml'))/node()
    let $editionWorks := $editionDoc//edirom:work
    
    for $editionWork at $pos in $editionWorks
        let $workID := $editionWork/@xml:id/fn:string()
        let $workDoc := collection('xmldb:exist:///db/contents/baudi/works/')[mei:mei/@xml:id = $workID]
        let $workName := $workDoc//mei:workDesc//mei:work/mei:titleStmt/mei:title[1]/text()
        let $workSources := collection('xmldb:exist:///db/contents/baudi/sources/')[.//mei:relationList//mei:relation/@target[contains(substring-before(., '#'), $workID)]]
        return
            <div class="panel panel-default">
                <div class="panel-heading" role="tab" id="headingOne">
                    <h4 class="panel-title">
                        <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#{concat('collapse', $pos)}" aria-expanded="true" aria-controls="{concat('collapse', $pos)}">
                  {$workName}<span> </span><small>{$workID}</small>
                        </a>
                    </h4>
                </div>
                <div id="{concat('collapse', $pos)}" class="panel-collapse collapse" role="tabpanel" aria-labelledby="{concat('heading', $pos)}">
                    <div class="panel-body">
                    <p>Handschriften:</p>
                        <ul>
                            {
                                for $workSource in $workSources[contains(.//mei:identifier[@type='siglum']/text(),'Hs')]
                                let $workSourceID := $workSource/mei:mei/@xml:id/fn:string()
                                let $workSourceDesc := $workSource//mei:sourceDesc//mei:source[1]
                                let $workSourceTitle := $workSourceDesc//mei:titleStmt//mei:title[1]/text()
                                let $workSourceSiglum := $workSourceDesc//mei:identifier[@type = 'siglum']/text()
                                let $workSourceShelfMark := $workSourceDesc//mei:identifier[@type = 'shelfmark']/text()
                                return
                                    <li><a href="{concat('http://localhost:8080/exist/apps/ediromBackend/', $workSourceID, '.html')}" target="_blank">{$workSourceTitle}</a> {concat(' – ', $workSourceSiglum, (if($workSourceShelfMark) then(concat(', ', $workSourceShelfMark))else()), ' – ', $workSourceID)}</li>
                            }
                        </ul>
                    <p>Drucke:</p>
                        <ul>
                            {
                                for $workSource in $workSources[contains(.//mei:identifier[@type='siglum']/text(),'Dr')]
                                let $workSourceID := $workSource/mei:mei/@xml:id/fn:string()
                                let $workSourceDesc := $workSource//mei:sourceDesc//mei:source[1]
                                let $workSourceTitle := $workSourceDesc//mei:titleStmt//mei:title[1]/text()
                                let $workSourceSiglum := $workSourceDesc//mei:identifier[@type = 'siglum']/text()
                                let $workSourceShelfMark := $workSourceDesc//mei:identifier[@type = 'shelfmark']/text()
                                return
                                    <li><a href="{concat('http://localhost:8080/exist/apps/ediromBackend/', $workSourceID, '.html')}" target="_blank">{$workSourceTitle}</a> {concat(' – ', $workSourceSiglum, (if($workSourceShelfMark) then(concat(', ', $workSourceShelfMark))else()), ' – ', $workSourceID)}</li>
                            }
                        </ul>
                    <p>Editionen:</p>
                        <ul>
                            {
                                for $workSource in $workSources[contains(.//mei:identifier[@type='siglum']/text(),'Ed')]
                                let $workSourceID := $workSource/mei:mei/@xml:id/fn:string()
                                let $workSourceDesc := $workSource//mei:sourceDesc//mei:source[1]
                                let $workSourceTitle := $workSourceDesc//mei:titleStmt//mei:title[1]/text()
                                let $workSourceSiglum := $workSourceDesc//mei:identifier[@type = 'siglum']/text()
                                let $workSourceShelfMark := $workSourceDesc//mei:identifier[@type = 'shelfmark']/text()
                                return
                                    <li><a href="{concat('http://localhost:8080/exist/apps/ediromBackend/', $workSourceID, '.html')}" target="_blank">{$workSourceTitle}</a> {concat(' – ', $workSourceSiglum, (if($workSourceShelfMark) then(concat(', ', $workSourceShelfMark))else()), ' – ', $workSourceID)}</li>
                            }
                        </ul>
                    <p>Sonstige:</p>
                        <ul>
                            {
                                for $workSource in $workSources[not(.//mei:identifier[@type='siglum']) or .//mei:identifier[@type='siglum'][not(contains(.,'Hs') or contains(.,'Dr') or contains(.,'Ed'))]]
                                let $workSourceID := $workSource/mei:mei/@xml:id/fn:string()
                                let $workSourceDesc := $workSource//mei:sourceDesc//mei:source[1]
                                let $workSourceTitle := $workSourceDesc//mei:titleStmt//mei:title[1]/text()
                                let $workSourceSiglum := $workSourceDesc//mei:identifier[@type = 'siglum']/text()
                                let $workSourceShelfMark := $workSourceDesc//mei:identifier[@type = 'shelfmark']/text()
                                return
                                    <li><a href="{concat('http://localhost:8080/exist/apps/ediromBackend/', $workSourceID, '.html')}" target="_blank">{$workSourceTitle}</a> {concat(' – ', $workSourceSiglum, (if($workSourceShelfMark) then(concat(', ', $workSourceShelfMark))else()), ' – ', $workSourceID)}</li>
                            }
                        </ul>
        
                    </div>
                </div>
            </div>
(:        <li><a href='{concat('http://localhost:8080/exist/apps/ediromBackend/', $workID, '.html')}' target='_blank'>{$workName}</a></li>:)
};

declare %templates:wrap function app:sourceStructure($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')/mei:mei[contains(@xml:id, $sourceID)]
    let $sourceBody := $sourceDoc//mei:body
    let $sourceMdivs := $sourceBody//mei:mdiv
    for $sourceMdiv in $sourceMdivs
        let $sourceMdivTitle := $sourceMdiv/@label/fn:string()
        let $sourceMdivMeasures := $sourceMdiv//mei:measure
        let $sourceMdivMeasureCount := count($sourceMdivMeasures)
        return
        <li>{concat($sourceMdivTitle, if ($sourceMdivMeasureCount > 0) then(concat(' – ', $sourceMdivMeasureCount, if ($sourceMdivMeasureCount = 1) then(' Takt') else(' Takte')))else())}</li>
};

declare %templates:wrap function app:sourceSurfaces($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')/mei:mei[contains(@xml:id, $sourceID)]
    let $sourceFacsimile := $sourceDoc//mei:facsimile
    let $sourceSurfaces := $sourceFacsimile//mei:surface
    for $sourceSurface in $sourceSurfaces
        let $sourceSurfaceN := $sourceSurface/@n/fn:string()
        let $sourceSurfaceZones := $sourceSurface//mei:zone
        let $sourceSurfaceZonesCount := count($sourceSurfaceZones)
        return
        <li>{concat($sourceSurfaceN, ', ', $sourceSurfaceZonesCount, ' Zone(n)')}</li>
};

declare %templates:wrap function app:workTitle($node as node(), $model as map(*)) {
    let $workDoc := doc(concat('xmldb:exist:///db/contents/baudi/works/', $model('docID'), '.xml'))/node()
    let $workTitle := $workDoc//mei:workDesc//mei:work/mei:titleStmt/mei:title[1]/text()
    return
        $workTitle
};

declare %templates:wrap function app:sourceTitle($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceDesc := $sourceDoc//mei:sourceDesc//mei:source[1]
    let $sourceTitle := $sourceDesc//mei:title[1]/text()
    let $sourceShelfMark := $sourceDesc//mei:identifier[@type = 'shelfmark']/text()
    return
        concat($sourceTitle, if($sourceShelfMark) then(concat(', ', $sourceShelfMark)) else())
};

declare function app:sourceClassification($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceDesc := $sourceDoc//mei:sourceDesc//mei:source[1]
    let $sourceClassification := $sourceDesc//mei:classification/text()
    return
        if ($sourceClassification = 'MusMs')
        then ('Musikhandschrift')
        else if ($sourceClassification = 'MusPr')
        then ('Musikdruck')
        else if ($sourceClassification = 'MusEd')
        then ('Musikedition')
        else ('[k.A.]')
};

declare %templates:wrap function app:sourceShelfMark($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceDesc := $sourceDoc//mei:sourceDesc//mei:source[1]
    let $sourceShelfMark := if ($sourceDesc//mei:identifier[@type = 'siglum']/text())
                            then ($sourceDesc//mei:identifier[@type = 'siglum']/text())
                            else ('[k.A.]')
    return
        $sourceShelfMark
};

declare %templates:wrap function app:sourceSigla($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceDesc := $sourceDoc//mei:sourceDesc//mei:source[1]
    let $sourceSigla := $sourceDesc//mei:identifier[@type = 'siglum']/text()
    for $sourceSiglum in $sourceSigla
    return
        <li>{$sourceSiglum}</li>
};

declare %templates:wrap function app:sourceWorkRelations($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceWorkRelationIDs := for $sourceWorkRelation in $sourceDoc//mei:relationList//mei:relation
                                let $sourceWorkRelationWorkID := $sourceWorkRelation/@target/substring-before(substring-after(., '#'), '_exp1')
                                return
                                    $sourceWorkRelationWorkID
    for $sourceWorkRelationWorkID in $sourceWorkRelationIDs
        let $workDoc := collection('xmldb:exist:///db/contents/baudi/works/')[mei:mei/@xml:id = $sourceWorkRelationWorkID]
        let $workDesc := $workDoc//mei:workDesc/mei:work[1]
        let $workTitle := $workDesc/mei:titleStmt/mei:title[1]/text()
        return
        <li>{$workTitle}</li>
};

(:declare %templates:wrap function app:sourceTextRelations($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/text')[mei:mei/@xml:id = $sourceID]
    let $sourceTextRelationIDs := for $sourceTextRelation in $sourceDoc//mei:relationList//mei:relation
                                let $sourceTextRelationTextID := $sourceTextRelation/@target/substring-before(substring-after(., '#'), '_exp1')
                                return
                                    $sourceTextRelationTextID
    for $sourceTextRelationTextID in $sourceTextRelationIDs
        let $textDoc := collection('xmldb:exist:///db/contents/baudi/sources/text/')[mei:mei/@xml:id = $sourceTextRelationTextID]
        let $textTitle := $textDoc//mei:titleStmt/mei:title/text()
        return
        <li>{$textTitle}</li>
};

declare %templates:wrap function app:sourceTextTemplates($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceTextTemplates := collection('xmldb:exist:///db/contents/baudi/sources/text/templates')[tei:TEI//tei:sourceDesc/@corresp/substring-before(.,'.xml#') = $sourceID]
    let $sourceTextTemplatesIDs := for $sourceTextTemplate in $sourceTextTemplates//tei:sourceDesc
                                let $sourceTextTemplateID := $sourceTextTemplate/@corresp/substring-before(.,'.xml#')
                                return
                                    $sourceTextTemplateID
    for $sourceTextTemplateMeta in $sourceTextTemplatesIDs
        let $textTemplateAuthor := $sourceTextTemplates//tei:fileDesc/tei:titleStmt/tei:author/text()
        let $textTemplateTitle := $sourceTextTemplates//tei:fileDesc/tei:titleStmt/tei:title/text()
        return
        <li>{$textTemplateAuthor}: {$textTemplateTitle}</li>
};:)

declare %templates:wrap function app:sourceOptions($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceDocUri := fn:document-uri($sourceDoc)
    let $sourceCartographerLink := 'http://localhost:8080/exist/apps/edirom/sourceImageCartographer/index.html'
    let $sourceCartographerParam := concat('?uri=', substring-after($sourceDocUri, '/db'))
    
    return
        if ($sourceDoc//mei:surface)
        then (<a class="btn btn-primary btn-sm" href="{concat($sourceCartographerLink, $sourceCartographerParam)}" target="_blank">Zum Vertakten öffnen</a>)
        else(<div class="alert alert-warning" role="alert">{$sourceID}Keine Quellenseiten vorhanden. Bitte zunächst Bilder einfügen!</div>)
        
};

declare %templates:wrap function app:sourceValidation($node as node(), $model as map(*)) {
    let $sourceID := substring-before($model('docID'),'.html')
    let $sourceDoc := collection('xmldb:exist:///db/contents/baudi/sources/')[mei:mei/@xml:id = $sourceID]
    let $sourceDocUri := fn:document-uri($sourceDoc)
    
    return
        if ($sourceDoc//mei:zone//@ulx < 0 or $sourceDoc//mei:zone//@uly < 0 or $sourceDoc//mei:zone//@lrx < 0 or $sourceDoc//mei:zone//@lry < 0)
        then (<div class="alert alert-danger" role="alert">Dieses Quellenobjekt enthält Zonen mit negativen Koordinaten. Bitte korrigieren!</div>)
        else()
        
};

declare %templates:wrap function app:workConcordances($node as node(), $model as map(*)) {
    let $concordances := collection('xmldb:exist:///db/contents/baudi/editionFiles/')//edirom:work[@xml:id = $model('docID')]//edirom:concordance/node()
    
    for $concordance in $concordances
    let $concordanceStringDE := $concordance/@name/fn:string()
    return 
        (<h4>{$concordanceStringDE}</h4>)
        
        
};